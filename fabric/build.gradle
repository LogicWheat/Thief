plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")
    modImplementation("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_port_version}")

//    modRuntimeOnly("maven.modrinth:guard-villagers-(fabricquilt):2.1.2-1.21")

    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")
    modRuntimeOnly("maven.modrinth:modmenu:YIfqIJ8q")
    modRuntimeOnly("maven.modrinth:jade:15.10.0+fabric")
    modRuntimeOnly("maven.modrinth:sodium:mc1.21.1-0.6.13-fabric")
//    modRuntimeOnly("maven.modrinth:iris:1.8.8+1.21.1-fabric")

    modImplementation("maven.modrinth:lithostitched:${lithostitched_fabric_version}")
    modImplementation("maven.modrinth:improved-village-placement:${improved_village_placement_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        client {
            programArgs "--username", "Dev"
        }
        create("client2") {
            inherit(getByName("client"))

            name("Second Client")
            programArgs("--username", "AnotherDev")

            client()
        }
    }
}

shadowJar {
    exclude("architectury.common.json")
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}