plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }

}

dependencies {
    neoForge "net.neoforged:neoforge:${neoforge_version}"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(include("io.github.llamalad7:mixinextras-neoforge:0.4.1"))

    modCompileOnlyApi("dev.latvian.mods:kubejs-neoforge:$kubejs_version")
//    interfaceInjectionData("dev.latvian.mods:kubejs-neoforge:$kubejs_version") // optional

//    modCompileOnlyApi("dev.latvian.mods:kubejs-neoforge:${kubejs_version}")
//    modRuntimeOnly("dev.latvian.mods:kubejs-neoforge:${kubejs_version}") { transitive = false }
//    modRuntimeOnly("dev.latvian.mods:rhino:${rhino_version}") { transitive = false }
//    modRuntimeOnly("dev.latvian.apps:tiny-java-server:${tiny_server_version}") { transitive = false }

    modRuntimeOnly("maven.modrinth:guard-villagers:cXW6pA2s") { transitive = false }
    modRuntimeOnly("maven.modrinth:carry-on:79dpvD0M") { transitive = false }

    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}") { transitive = false }
    modRuntimeOnly("curse.maven:jade-324717:${jade_neoforge_id}") { transitive = false }
    modRuntimeOnly("curse.maven:embeddium-908741:6118392") { transitive = false }

    // modImplementation("maven.modrinth:lithostitched:${lithostitched_neoforge_version}")
    // modImplementation("maven.modrinth:improved-village-placement:${improved_village_placement_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

loom {
    accessWidenerPath.set(project(":common").loom.accessWidenerPath)

    runs {
        create("client2") {
            inherit(getByName("client"))

            name("Second Client")
            programArgs("--username", "AnotherDev")

            client()
        }
    }
}

shadowJar {
    exclude("architectury.common.json")
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}