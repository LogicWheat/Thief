plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    loom {
        silentMojangMappingsLicense()
        runs {
            client {
                vmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:HotswapAgent=fatjar'
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${parchment_version}@zip")
        }

        modCompileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0"))

        modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
        modCompileOnlyApi("curse.maven:jade-324717:${jade_forge_id}")
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = "${mod_id}-${minecraft_version}-${project.name}"
                version = "${mod_version}"
                from components.java
            }
        }

        repositories {
            var path = System.getenv("LOCAL_MAVEN")
            if (path != null) {
                maven {
                    name = 'mortuusarsResources'
                    url = uri(path + "/maven")
                }
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    base {
        archivesName = "${mod_id}-${minecraft_version}"
    }

    version = rootProject.mod_version
    group = rootProject.mod_group_id

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            // location of the maven that hosts JEI files before January 2023
            name = "Progwml6's maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            name = 'tterrag maven'
            url = 'https://maven.tterrag.com/'
        }
        maven {
            // location of the maven that hosts JEI files since January 2023
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        maven {
            url = "https://cursemaven.com"
        }
        maven {
            url "https://maven.shedaniel.me"
        } // REI

        maven {
            // Shedaniel's maven (Architectury API)
            url = "https://maven.architectury.dev"
            content {
                includeGroup "dev.architectury"
            }
        }

        maven {
            url "https://maven.latvian.dev/releases"
            content {
                includeGroup "dev.latvian.mods"
                includeGroup "dev.latvian.apps"
            }
        }

        maven {
            url 'https://jitpack.io'
            content {
                includeGroup "com.github.rtyley"
            }
        }

        // EMI
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
        }
    }

    dependencies {

    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

/**
 * Gets the first part (topmost) of a changelog file.
 * Expects it to be in the following format:
 * [
 *  ## latest version
 *      changes
 *
 *  ## older version
 *      changes
 * ]
 * Will return an empty string if failed.
 */
def getLatestVersionChangelog() {
    def changelogFileName = 'CHANGELOG.md'
    def changelogFile = file(changelogFileName)
    if (changelogFile.exists()) {
        def changelogContent = changelogFile.text
        def changelogParts = changelogContent.split(/(?m)^##\s/)

        if (changelogParts.size() > 1) {
            return "## " + changelogParts[1].trim() // First part will always be second in the list
        } else {
            println("[WARN] Changelog does not contain any versions.")
            return ""
        }
    } else {
        println("[WARN] Changelog file <${changelogFileName}> does not exist.")
        return ""
    }
}

project.ext.changelog = getLatestVersionChangelog()

task printLatestVersionChangelog {
    doLast {
        println project.changelog
    }
}

publishMods {
    changelog = project.ext.changelog
    type = STABLE
    dryRun = providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null || providers.environmentVariable("MODRINTH_TOKEN").getOrNull() == null

    def cfOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = mod_curseforge_project_id
        minecraftVersions.add("${minecraft_version}")
        javaVersions.add(JavaVersion.VERSION_17)
        clientRequired = true
        serverRequired = true
    }

    def mrOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = mod_modrinth_project_id
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeForge") {
        from cfOptions
        file project(":forge")
        modLoaders.add("forge")
        displayName = "${mod_name} - Forge ${minecraft_version} - ${mod_version}"
    }

    curseforge("curseforgeFabric") {
        from cfOptions
        file project(":fabric")
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        displayName = "${mod_name} - Fabric ${minecraft_version} - ${mod_version}"
        requires("fabric-api")
        requires("forge-config-api-port-fabric")
    }

    modrinth("modrinthForge") {
        from mrOptions
        file project(":forge")
        modLoaders.add("forge")
        displayName = "${mod_name} - ${mod_version}"
    }

    modrinth("modrinthFabric") {
        from mrOptions
        file project(":fabric")
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        displayName = "${mod_name} - ${mod_version}"
        requires("fabric-api")
        requires("forge-config-api-port")
    }
}